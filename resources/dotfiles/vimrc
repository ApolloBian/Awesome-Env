
" ----- Setup Vundle      -----------------------------------------------------
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
" Vundle Plugins
" Appearance
"   - Color scheme
        " A tool for generating colorscheme: https://github.com/jacoborus/estilo
        " Plugin 'cocopon/iceberg.vim'
        Plugin 'rakr/vim-one'
        Plugin 'AlessandroYorba/Sierra'
        Plugin 'altercation/vim-colors-solarized'
        " Plugin 'altercation/vim-colors-solarized'
        Plugin 'tomasr/molokai' 
        Plugin 'morhetz/gruvbox'
        " Plugin 'jacoborus/tender.vim'
        " Plugin 'rakr/vim-one' "atom color scheme, good for light color
        Plugin 'arcticicestudio/nord-vim'
"   - Status line
        " Plugin 'itchyny/lightline.vim'
        Plugin 'vim-airline/vim-airline'
        Plugin 'vim-airline/vim-airline-themes'
" Functions
"   - Git
        Plugin 'tpope/vim-fugitive' " :Gblame
        Plugin 'airblade/vim-gitgutter' " display line status on the left
"   - File browsing
        Plugin 'scrooloose/nerdtree'
        Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
        Plugin 'Xuyuanp/nerdtree-git-plugin'
        Plugin 'ctrlpvim/ctrlp.vim'
        Plugin 'ryanoasis/vim-devicons'
"   - Programming
        Plugin 'Valloric/YouCompleteMe'                     
        Plugin 'w0rp/ale'
        Plugin 'majutsushi/tagbar'
        Plugin 'ludovicchabant/vim-gutentags'
        Plugin 'plytophogy/vim-virtualenv'
        Plugin 'tpope/vim-commentary'                     
        Plugin 'rizzatti/dash.vim'
        " Plugin 'xolox/vim-easytags'
"   - System Integration
        Plugin 'lilydjwg/fcitx.vim'                         " need to modify according to git repo readme
        Plugin 'christoomey/vim-tmux-navigator'
"   - Markdown
"   - Latex
        " Plugin 'lervag/vimtex'
" Not familar plugins
        Plugin 'jez/vim-superman'
        Plugin 'Chiel92/vim-autoformat'
        Plugin 'xolox/vim-misc'
        " Plugin 'Raimondi/delimitMate'
        " Plugin 'scrooloose/nerdcommenter'
        Plugin 'kchmck/vim-coffee-script'

" *** Deprecated settings ***
        " Plugin 'vim-pandoc/vim-pandoc'       
        " Plugin 'vim-pandoc/vim-pandoc-syntax'
        " Plugin 'vim-syntastic/syntastic' " Replaced by ale
        " Plugin 'vim-scripts/a.vim'
        " Plugin 'jez/vim-c0'
        " Plugin 'jez/vim-ispc'
        " Plugin 'suan/vim-instant-markdown'
call vundle#end()
filetype plugin indent on



" ----- General Settings  -----------------------------------------------------
set nocompatible       " Use Vim settings, rather than Vi settings (much better!).
                       " This must be first, because it changes other options as a side effect.
set list!              " show endl and tabs
set listchars=tab:▸\ ,eol:¬                       " for more info, type :help listchars
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
set ruler              " show the cursor position all the time
set hlsearch           " highlight search
set ignorecase         " ignore case when searching
set history=1000       " keep 1000 lines of command line history
set number             " line numbers
set numberwidth=5
set showcmd            " display incomplete commands
set incsearch          " do incremental searching
set linebreak          " wrap lines on 'word' boundaries
set scrolloff=8        " don't let the cursor touch the edge of the viewport
" set timeoutlen=100     " Lower ^[ timeout
set fillchars=fold:\ , " get rid of obnoxious '-' characters in folds
set tildeop            " use ~ to toggle case as an operator, not a motion
set lazyredraw         " make macros faster
set ttyfast
set formatoptions-=r formatoptions-=c formatoptions-=o
set expandtab          " Expand tabs into spaces
set tabstop=4          " default to 2 spaces for a hard tab
set softtabstop=4      " default to 2 spaces for the soft tab
set shiftwidth=4       " for when <TAB> is pressed at the beginning of a line
" zsh style command completion
set wildmenu
set wildmode=full
" remember more history, 200 will be more than useful
set history=200
" let mapleader=","
syntax on
if !(has('win32') || has('win64')) && !has("gui_running")
    " :W sudo write
    command! W w !sudo tee % > /dev/null
endif
if exists('&breakindent')
    set breakindent      " Indent wrapped lines up to the same level
endif
set mouse=a
hi clear SignColumn     " We need this for plugins like Syntastic and vim-gitgutter which put symbols
                        " in the sign column.
cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" - Deprecated
" set splitright          " Vertical splits use right half of screen
" set listchars=tab:▸\ ,space:·,eol:¬             " for more info, type :help listchars
" set cursorline       " highlight current line, this makes vim super slow in cmd line



" ----- Make Vim look good ----------------------------------------------
" more about true colors ':help xterm-true-color'
set termguicolors
set background=dark
set guifont=Source\ Code\ Pro\ Light\ Nerd\ Font\ Complete\ Mono:h13 " :set guifont? | this cmd gives current font
set guioptions=             " disable sidebars in gui
set encoding=utf-8
set laststatus=2
set noshowmode

" colorscheme iceberg
colorscheme gruvbox
let g:lightline = { 
            \ 'colorscheme': 'gruvbox',
            \ 'component_function': {
            \   'filetype': 'MyFiletype',
            \   'fileformat': 'MyFileformat',
            \ }
            \ }

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

hi Comment cterm=italic gui=italic

" -----Plugin airline ------------------------------------------------
" let g:airline_theme='solarized'
let g:airline_theme='gruvbox'
" let g:airline_theme='one'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" powerline-status
" set rtp+=/anaconda/lib/python2.7/site-packages/powerline/bindings/vim/
" set rtp+=/mnt/ficusthailand/tlbian/virtualenv/py3_Tensorflow_GPU/lib/python3.4/site-packages/powerline/bindings/vim/


" ----- Plugin vim-virtualenv
let g:virtualenv_directory = '$HOME/Developer/python-virtualenv'
set statusline+=%{virtualenv#statusline()}

" ----- Plugin Nerdtree -----------------------------------------------
" nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_console_startup = 0       " To have NERDTree always open on startup
let NERDTreeIgnore=['\.pyc$', '\~$','__pycache__', 'tags']                  " ignore files in NERDTree
let NERDTreeShowHidden=0                              " show hidden files
let g:webdevicons_enable_nerdtree = 0
let g:webdevicons_enable_ctrlp = 1
" let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
" let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'

" ----- Plugin Nerdtree-git-plugin------------------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"    : "○",
    \ "Staged"      : "●",
    \ "Untracked"   : "×",
    \ }

" ----- Plugin CtrlP --------------------------------------------------
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|pyc|jpeg|jpg|png|mat|zip|tar|tar.gz|bz2|swp|swo|xml)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }


" ----- Plugin Syntastic ----------------------------------------------
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = "▲"
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_quiet_messages = {"type" : "style"}
let g:syntastic_python_checker = ['flake8']


" ----- Plugin ale ------------------------------------------------------
"始终开启标志列
" let g:ale_sign_column_always = 1
" let g:ale_set_highlights = 1
"自定义error和warning图标
" let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '▲'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '▲ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = '✗'
let g:ale_echo_msg_warning_str = '▲'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" flake8 相关设置
let g:ale_python_flake8_args="--ignore=E402,E128,E126"


" ----- Plugin vim-easytags ---------------------------------------------
" set tags=./tags " ;,~/.vimtags
" Sensible defaults
" let g:easytags_file = '~/.vim/tags'
let g:easytags_by_filetype = '~/.vim/tags/'
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- Plugin tagbar ----------------------------------------
" Open/close tagbar with \b
" nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)

" ----- Plugin vim-gitgutter ---------------------------------
let g:airline#extensions#hunks#non_zero_only = 1

" ---- Plugin vim-pandoc-syntax
let g:pandoc#syntax#conceal#use = 0


" ---- vimtex -------------------
" let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:vimtex_matchparen_enabled = 0
let g:vimtex_mappings_enabled = 1
" let g:vimtex_view_method='skim'
" let g:vimtex_view_general_options = '-r @line @pdf @tex'


" ----- Plugin delimitMate --------------------------------------------
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" ----- Plugin gutentags --------------------------------------------
let g:gutentags_cache_dir = '~/.vim/tags/'
let g:gutentags_exclude_project_root = ['~/', '/usr/local']

" ----- Plugin vim-superman ---------------------------------------------

" ----- Plugin Youcompleteme -------------------------------------------
let g:ycm_python_binary_path = 'python'
" let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
endif

" ----- Plugin vim-instant-markdown
" set shell=zsh\ -i
let g:instant_markdown_autostart = 0

" ----- important keymaps ----------------------------------------------------
map <C-t> :TagbarToggle<CR>
nmap <S-p> <Plug>(ale_previous_wrap)
nmap <S-n> <Plug>(ale_next_wrap)
"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
"<Leader>s触发/关闭语法检查
" nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
" nmap <Leader>d :ALEDetail<CR>
noremap M :SuperMan <cword><CR>
map <C-n> :NERDTreeToggle<CR>                        
" Ctrl p search files

" #TODO:
" scroll between buffer ? liu chen yu's vimrc
