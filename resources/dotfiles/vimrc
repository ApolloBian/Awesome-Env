" ----- Setup Vim-plug -----------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
" Vim-plug Plugins
" Appearance
"   - Color scheme
    " A tool for generating colorscheme: https://github.com/jacoborus/estilo
    Plug 'flazz/vim-colorschemes'
    Plug 'cocopon/iceberg.vim'
    Plug 'rakr/vim-one'
    Plug 'ApolloBian/Retro.vim'
    Plug 'AlessandroYorba/Sierra'
    Plug 'altercation/vim-colors-solarized'
    " Plug 'altercation/vim-colors-solarized'
    Plug 'tomasr/molokai'
    Plug 'morhetz/gruvbox'
    " Plug 'jacoborus/tender.vim'
    " Plug 'rakr/vim-one' "atom color scheme, good for light color
    Plug 'arcticicestudio/nord-vim'
    Plug 'cocopon/pgmnt.vim'
    Plug 'cocopon/colorswatch.vim'
"   - Status line
    Plug 'itchyny/lightline.vim'
    " Plug 'vim-airline/vim-airline'
    " Plug 'vim-airline/vim-airline-themes'
" Functions
"   - Start screen
    if !has("gui_macvim")
        Plug 'mhinz/vim-startify'
    endif
"   - Git
    Plug 'tpope/vim-fugitive' " :Gblame
    Plug 'airblade/vim-gitgutter' " display line status on the left
"   - File browsing
    " Plug 'scrooloose/nerdtree'
    " Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    " Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'ryanoasis/vim-devicons'
"   - Programming
    function! BuildYCM(info)
        " info is a dictionary with 3 fields
        " - name:   name of the plugin
        " - status: 'installed', 'updated', or 'unchanged'
        " - force:  set on PlugInstall! or PlugUpdate!
        if a:info.status == 'installed' || a:info.force
            !./install.py --clang-completer
        endif
    endfunction
    Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
    " Plug 'w0rp/ale'
    Plug 'majutsushi/tagbar'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'plytophogy/vim-virtualenv'
    Plug 'tpope/vim-commentary'
    " Plug 'rizzatti/dash.vim'
    " Plug 'xolox/vim-easytags'
"   - System Integration
    " Plug 'lilydjwg/fcitx.vim'                         " need to modify according to git repo readme
    " Plug 'christoomey/vim-tmux-navigator'
    Plug 'jez/vim-superman'
"   - Reading
    " Plug 'inkarkat/vim-mark'
    " Plug 'inkarkat/vim-ingo-library' " dependency of above
    " Plug 'makerj/vim-pdf'
"   - Markdown
"   - Latex
    " Plug 'lervag/vimtex'
" Not familar Plugs
    " Plug 'Chiel92/vim-autoformat'
    " Plug 'xolox/vim-misc'
    " Plug 'Raimondi/delimitMate'
    " Plug 'scrooloose/nerdcommenter'
    " Plug 'kchmck/vim-coffee-script'

" *** Deprecated settings ***
    " Plug 'vim-pandoc/vim-pandoc'
    " Plug 'vim-pandoc/vim-pandoc-syntax'
    " Plug 'vim-syntastic/syntastic' " Replaced by ale
    " Plug 'vim-scripts/a.vim'
    " Plug 'jez/vim-c0'
    " Plug 'jez/vim-ispc'
    " Plug 'suan/vim-instant-markdown'
call plug#end()



" ----- General Settings  -----------------------------------------------------
set nocompatible       " Use Vim settings, rather than Vi settings (much better!).
                       " This must be first, because it changes other options as a side effect.
set list!              " show endl and tabs
set listchars=tab:▸\ ,eol:¬                       " for more info, type :help listchars
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
set ruler              " show the cursor position all the time
set hlsearch           " highlight search
set ignorecase         " ignore case when searching
set history=1000       " keep 1000 lines of command line history
set number             " line numbers
set numberwidth=5
set showcmd            " display incomplete commands
set incsearch          " do incremental searching
set linebreak          " wrap lines on 'word' boundaries
set scrolloff=8        " don't let the cursor touch the edge of the viewport
" set timeoutlen=100     " Lower ^[ timeout
set fillchars=fold:\ , " get rid of obnoxious '-' characters in folds
set tildeop            " use ~ to toggle case as an operator, not a motion
set lazyredraw         " make macros faster
set ttyfast
set formatoptions-=r formatoptions-=c formatoptions-=o
set expandtab          " Expand tabs into spaces
set tabstop=4          " default to 2 spaces for a hard tab
set softtabstop=4      " default to 2 spaces for the soft tab
set shiftwidth=4       " for when <TAB> is pressed at the beginning of a line
set hidden             " allow edited buffers to be hidden
set clipboard=exclude:.*    " prevent vim from connecting to x11 on remote connection
                            " ref: https://stackoverflow.com/questions/14635295/vim-takes-a-very-long-time-to-start-up
" workarounds for background disappears when scrolling
let &t_ut=''
" zsh style command completion
set wildmenu
set wildmode=full
" remember more history, 200 will be more than useful
set history=200
" let mapleader=","
syntax on
if !(has('win32') || has('win64')) && !has("gui_running")
    " :W sudo write
    command! W w !sudo tee % > /dev/null
endif
if exists('&breakindent')
    set breakindent      " Indent wrapped lines up to the same level
endif
set mouse=a
hi clear SignColumn     " We need this for plugins like Syntastic and vim-gitgutter which put symbols
                        " in the sign column.
cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

" - Deprecated
" set splitright          " Vertical splits use right half of screen
" set listchars=tab:▸\ ,space:·,eol:¬             " for more info, type :help listchars
set cursorline


" ----- Make Vim look good ----------------------------------------------
" more about true colors ':help xterm-true-color'
set termguicolors
set background=dark
set guifont=Source\ Code\ Pro\ Light\ Nerd\ Font\ Complete\ Mono:h13 " :set guifont? | this cmd gives current font
set guioptions=             " disable sidebars in gui
set encoding=utf-8
set laststatus=2
set noshowmode

" Change cursor shape between insert and normal mode in iTerm2.app
" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
" https://github.com/kovidgoyal/kitty/issues/715
" This setting is for VTE compatible terminals (urxvt, st, xterm, gnome-terminal 3.x and others) 
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
" set cursor shape when entering/exiting vim
" autocmd VimEnter * silent !print -n '\033[2 q'
autocmd VimLeave * silent !print -n '\033[4 q'
" highlight Cursor guifg=white guibg=black


" file templates for py, bash, etc
autocmd BufNewFile main.py 0r ~/.vim/templates/python_main.py
autocmd BufNewFile *.py 0r ~/.vim/templates/python.py
autocmd BufNewFile *.sh 0r ~/.vim/templates/bash.sh


colorscheme iceberg
let g:lightline = { 
            \ 'colorscheme': 'iceberg',
            \ 'component_function': {
            \   'filetype': 'MyFiletype',
            \   'fileformat': 'MyFileformat',
            \ }
            \ }

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

hi Comment cterm=italic gui=italic

if !has("gui_macvim")
    " settings for transparency
    " not very ideal for current setup, but may work if endl marks are disabled
    " use :highlight to inspect cur highlight group
    hi Normal ctermbg=NONE guibg=NONE
    hi NonText ctermbg=NONE guibg=NONE
    hi EndOfBuffer ctermbg=NONE guibg=NONE
endif

" hides cursorline in inactive buffers
" ref: https://superuser.com/questions/385553/making-the-active-window-in-vim-more-obvious
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cul
    autocmd WinLeave * set nocul
augroup END

" -----Plugin airline ------------------------------------------------
" let g:airline_theme='solarized'
" let g:airline_theme='gruvbox'
" let g:airline_theme='one'
" let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1

" ----- powerline-status -----------------------------------------------
" set rtp+=/anaconda/lib/python2.7/site-packages/powerline/bindings/vim/
" set rtp+=/mnt/ficusthailand/tlbian/virtualenv/py3_Tensorflow_GPU/lib/python3.4/site-packages/powerline/bindings/vim/

" search configs
" prevent * and # from jumping to next
" stackoverflow.com/questions/4256697/vim-search-and-highlight-but-do-not-jump
" conflict with vim-mark
" Using # will blink, but * won't
nnoremap <silent> * :let @/= '\<' . expand('<cword>') . '\>' <bar> set hls <cr>
nnoremap <silent> g* :let @/=expand('<cword>') <bar> set hls <cr>
nnoremap <silent> # m`:keepjumps normal! #<cr>``

" clear highlight
map <leader>c :noh<cr>

" Search highlight colors
hi Search ctermfg=0 ctermbg=11 guifg=Black guibg=#FFDB72
" more colors for search, colors from vim-mark
" hi Search ctermfg=0 ctermbg=14 guifg=Black guibg=#8CCBEA  " blue
" hi Search ctermfg=0 ctermbg=10 guifg=Black guibg=#A4E57E  " green
" hi Search ctermfg=0 ctermbg=11 guifg=Black guibg=#FFDB72  " yellow
" hi Search ctermfg=0 ctermbg=9 guifg=Black guibg=#FF7272   " red
" hi Search ctermfg=0 ctermbg=13 guifg=Black guibg=#FFB3FF  " pink
" hi Search ctermfg=0 ctermbg=12 guifg=Black guibg=#9999FF  " purple

" ----- Plugin vim-virtualenv ------------------------------------------
let g:virtualenv_directory = '$HOME/Developer/python-virtualenv'
set statusline+=%{virtualenv#statusline()}

" ----- Plugin Nerdtree -----------------------------------------------
" nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
" let g:nerdtree_tabs_open_on_console_startup = 0       " To have NERDTree always open on startup
" let NERDTreeIgnore=['\.pyc$', '\~$','__pycache__', 'tags']                  " ignore files in NERDTree
" let NERDTreeShowHidden=0                              " show hidden files
" let g:webdevicons_enable_nerdtree = 0
" let g:webdevicons_enable_ctrlp = 1
" let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
" let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
" let g:NERDTreeDirArrowExpandable = '+'
" let g:NERDTreeDirArrowCollapsible = '~'

" ----- Plugin Nerdtree-git-plugin------------------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"    : "○",
    \ "Staged"      : "●",
    \ "Untracked"   : "×",
    \ }

" ----- Plugin CtrlP --------------------------------------------------
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|pyc|jpeg|jpg|png|mat|zip|tar|tar.gz|bz2|swp|swo|xml)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }


" ----- Plugin Syntastic ----------------------------------------------
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = "▲"
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_quiet_messages = {"type" : "style"}
let g:syntastic_python_checker = ['flake8']


" ----- Plugin ale ------------------------------------------------------
"始终开启标志列
" let g:ale_sign_column_always = 1
" let g:ale_set_highlights = 1
"自定义error和warning图标
" let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '▲'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '▲ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = '✗'
let g:ale_echo_msg_warning_str = '▲'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" flake8 相关设置
let g:ale_python_flake8_args="--ignore=E402,E128,E126"


" ----- Plugin vim-easytags ---------------------------------------------
" set tags=./tags " ;,~/.vimtags
" Sensible defaults
" let g:easytags_file = '~/.vim/tags'
let g:easytags_by_filetype = '~/.vim/tags/'
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- Plugin tagbar ----------------------------------------
" Open/close tagbar with \b
" nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)

" ----- Plugin vim-gitgutter ---------------------------------
let g:airline#extensions#hunks#non_zero_only = 1

" ---- Plugin vim-pandoc-syntax
let g:pandoc#syntax#conceal#use = 0


" ---- vimtex -------------------
" let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:vimtex_matchparen_enabled = 0
let g:vimtex_mappings_enabled = 1
" let g:vimtex_view_method='skim'
" let g:vimtex_view_general_options = '-r @line @pdf @tex'


" ----- Plugin delimitMate --------------------------------------------
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" ----- Plugin gutentags --------------------------------------------
let g:gutentags_cache_dir = '~/.vim/tags/'
let g:gutentags_exclude_project_root = ['~/', '/usr/local']

" ----- Plugin vim-superman ---------------------------------------------

" ----- Plugin Youcompleteme -------------------------------------------
"  disable for mediawiki, latex and markdown
" let g:ycm_filetype_blacklist = {
"     \ 'mediawiki': 1,
"     \ 'plaintex': 1,
"     \ 'markdown': 1,
"     \ 'jsx': 1,
"     \ 'xml': 1,
"     \ 'html': 1}
set splitbelow
let g:ycm_python_binary_path = "python"     " use env python as python bin
let g:ycm_add_preview_to_completeopt = 1
nnoremap <leader>jd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gm :YcmCompleter GetDoc<CR>
" semantic triggers
" ref:https://github.com/Valloric/YouCompleteMe/issues/2961
let g:ycm_semantic_triggers = {
    \ 'python': ['re!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)'],
    \}
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_min_num_of_chars_for_completion = 15


" let g:ycm_global_ycm_extra_conf = "~/.ycm_global_extra_conf.py"


" ----- Plugin vim-instant-markdown
" set shell=zsh\ -i
let g:instant_markdown_autostart = 0

" ----- important keymaps ----------------------------------------------------
map <C-t> :TagbarToggle<CR>
" nmap <S-p> <Plug>(ale_previous_wrap)
" nmap <S-n> <Plug>(ale_next_wrap)
"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
"<Leader>s触发/关闭语法检查
" nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
" nmap <Leader>d :ALEDetail<CR>
noremap M :SuperMan <cword><CR>
" Ctrl p search files

" F1 for executing current script
" remove the last CR so that I have to press ENTER to confirm
" feels more secure
" <bar> semantics : https://stackoverflow.com/questions/3249275/vim-multiple-commands-on-same-line
map <F1> :w <bar> windo only <bar> term ./%
map <leader>ts :w <bar> !./%
" F1 was used to show help.txt
" :help will do the same trick tho

" #TODO:
" scroll between buffer ? liu chen yu's vimrc

